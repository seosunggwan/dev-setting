name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: backend-portfolio

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x backend/gradlew
    
    - name: Run tests
      working-directory: ./backend
      run: ./gradlew test
    
    - name: Build with Gradle
      working-directory: ./backend
      run: ./gradlew build -x test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x backend/gradlew
    
    - name: Build with Gradle
      working-directory: ./backend
      run: ./gradlew build -x test
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      working-directory: ./backend
      run: |
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        echo "Pushing Docker image..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Deploy to EC2 using SSM
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Deploying to EC2..."
        aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{
            "commands": [
              "echo \"Starting deployment...\"",
              "docker stop portfolio-app || true",
              "docker rm portfolio-app || true",
              "aws ecr get-login-password --region '${{ env.AWS_REGION }}' | docker login --username AWS --password-stdin '${{ steps.login-ecr.outputs.registry }}'",
              "docker pull '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}'",
              "docker run -d --name portfolio-app --restart unless-stopped -p 8080:8080 -e JAVA_OPTS=\"-Xms256m -Xmx512m\" -e SPRING_PROFILES_ACTIVE=prod -e SPRING_DATASOURCE_URL=\"jdbc:mysql://${{ secrets.RDS_ENDPOINT }}:3306/portfolio?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true\" -e SPRING_DATASOURCE_USERNAME=portfolio_user -e SPRING_DATASOURCE_PASSWORD=\"${{ secrets.RDS_PASSWORD }}\" -e SPRING_DATA_REDIS_HOST=\"${{ secrets.REDIS_HOST }}\" -e SPRING_DATA_REDIS_PASSWORD=\"${{ secrets.REDIS_PASSWORD }}\" '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}'",
              "echo \"Deployment completed!\""
            ]
          }'
    
    - name: Verify deployment
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 30
        
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":["docker ps | grep portfolio-app && echo \"✅ Application is running\" || echo \"❌ Application failed to start\""]}' \
          --query 'Command.CommandId' --output text)
        
        echo "Deployment verification command ID: $COMMAND_ID"