version: '3.8'

services:
  app:
    image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
    container_name: spring-app
    ports:
      - "8080:8080"
    environment:
      # DB 연결 정보
      RDS_ENDPOINT: ${RDS_ENDPOINT}
      RDS_USERNAME: ${RDS_USERNAME:-portfolio_user}
      RDS_PASSWORD: ${RDS_PASSWORD}

      # Redis 설정
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${SPRING_DATA_REDIS_PASSWORD:-1234}

      # 필수 설정
      JWT_SECRET: ${JWT_SECRET}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_REGION: ${AWS_REGION:-ap-northeast-2}
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}

      # OAuth2 설정 (선택사항)
      NAVER_CLIENT_ID: ${NAVER_CLIENT_ID:-}
      NAVER_CLIENT_SECRET: ${NAVER_CLIENT_SECRET:-}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}

      # 기타 설정
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
      DOMAIN_NAME: ${DOMAIN_NAME:-localhost}
      SPRING_PROFILES_ACTIVE: prod

    depends_on:
      - redis
    networks:
      - backend-net
    restart: unless-stopped

  redis:
    image: redis:7.0
    container_name: redis-server
    command: redis-server --requirepass ${SPRING_DATA_REDIS_PASSWORD:-1234}
    volumes:
      - redis_data:/data
    networks:
      - backend-net
    restart: unless-stopped

volumes:
  redis_data:

networks:
  backend-net: 