services:
  db:
    image: mysql:8.0
    container_name: db
    environment:
      MYSQL_DATABASE: portfolio
      MYSQL_USER: portfolio_user
      MYSQL_PASSWORD: ${RDS_PASSWORD:-portfolio1234}
      MYSQL_ROOT_PASSWORD: ${RDS_PASSWORD:-portfolio1234}
    ports:  # 운영에서는 내부 네트워크만 사용
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - monitoring
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "portfolio_user", "--password=${RDS_PASSWORD:-portfolio1234}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s  # 컨테이너 시작 후 30초 동안은 실패를 무시
    deploy:
      resources:
        limits:
          cpus: "2"  # 최대 2개의 코어 할당
          memory: 2GB   # 최대 2GB 메모리 할당

  # 로컬 개발 시에는 주석 처리 (로컬에서 직접 실행)
  spring-app:
    build: ./backend
    container_name: spring-app
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # Database Configuration
      RDS_ENDPOINT: db
      RDS_PASSWORD: ${RDS_PASSWORD:-portfolio1234}
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-256-bit-secret-your-256-bit-secret-your-256-bit-secret-your-256-bit-secret}
      # OAuth2 Configuration
      NAVER_CLIENT_ID: ${NAVER_CLIENT_ID:-your-naver-client-id}
      NAVER_CLIENT_SECRET: ${NAVER_CLIENT_SECRET:-your-naver-client-secret}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-your-google-client-id}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-your-google-client-secret}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-your-github-client-id}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-your-github-client-secret}
      # AWS S3 Configuration
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-your-s3-bucket}
      AWS_REGION: ${AWS_REGION:-ap-northeast-2}
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY:-your-aws-access-key}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY:-your-aws-secret-key}
      # Redis Configuration
      SPRING_DATA_REDIS_HOST: redis-server
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-1234}
      # Kafka Configuration
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Elasticsearch Configuration
      ELASTICSEARCH_URL: http://elasticsearch:9200
      # CORS Configuration
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:5173}
      # JVM Configuration
      JAVA_OPTS: "-Xms256m -Xmx512m"
    deploy:
      resources:
        limits:
          cpus: '2'    # CPU 2코어로 제한
          memory: 1G   # 전체 메모리 1GB로 제한
        reservations:
          cpus: '0.5'
          memory: 512M
    depends_on:
      db:
        condition: service_healthy  # MySQL의 health check가 성공할 때까지 대기
      redis:
        condition: service_started  # Redis가 시작되면 바로 시작
      kafka:
        condition: service_started  # Kafka가 시작되면 바로 시작
      elasticsearch:
        condition: service_healthy  # Elasticsearch 헬스체크 통과까지 대기
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Redis
  redis:
    image: redis:7.0
    container_name: redis-server
    command: redis-server --requirepass ${REDIS_PASSWORD:-1234}
    ports:  # 로컬 개발을 위해 포트 노출
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Redis Exporter
  redis_exporter:
    image: oliver006/redis_exporter
    container_name: redis_exporter
    ports:
      - "9121:9121"
    command:
      - '--redis.addr=redis://:${REDIS_PASSWORD:-1234}@redis:6379'
    depends_on:
      - redis
    networks:
      - monitoring

  # Zookeeper (Kafka 의존성)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Kafka 브로커
  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"  # 외부 접근용 호스트 포트
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # ✅ 보기 좋게 명시 (로컬 단일 브로커 기준)
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # ✅ 토픽 자동 생성용 one-shot 초기화 컨테이너
  kafka-init:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - monitoring
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      echo 'Creating Kafka topics if not exists...';
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic test-topic --partitions 1 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic health-check-topic --partitions 1 --replication-factor 1;
      echo 'Kafka topics ready.';
      "

  # Kafka UI (관리 콘솔)
  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:9200 >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 40s
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.1
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # 로컬 개발 시에는 주석 처리 (로컬에서 직접 실행)
  react-app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL}
    container_name: react-app
    ports:
      - "5173:5173"
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8080}
    networks:
      - monitoring
    depends_on:
      - spring-app
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

volumes:
  mysql_data:
  grafana_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_log:
  es_data:

networks:
  monitoring: